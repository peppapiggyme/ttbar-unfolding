cmake_minimum_required(VERSION 3.20)

project(
  ttbar_MadTree
  DESCRIPTION "Analyze root trees generated by Delphes"
  LANGUAGES CXX)

message(STATUS "Building ${CMAKE_PROJECT_NAME}::${PROJECT_NAME} ...")

if(NOT DEFINED CMAKE_CXX_STANDARD)
  message(STATUS "Using c++17 standard")
  set(CMAKE_CXX_STANDARD 17)
  set(CMAKE_CXX_STANDARD_REQUIRED ON)
endif()

message(STATUS "Configuring c++")
set(CMAKE_CXX_EXTENSIONS ON)
if(NOT DEFINED RELEASE)
  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall -Wpedantic -Wextra -g -Og")
else()
  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall -Wpedantic -Wextra -O3")
endif()

set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${CMAKE_SOURCE_DIR}/cmake/Modules/")

find_package(ROOT REQUIRED COMPONENTS ${rootlibs})
message(STATUS "Found ROOT")

message(STATUS "ROOT include path ${ROOT_INCLUDE_DIRS}")
include_directories(SYSTEM ${ROOT_INCLUDE_DIRS})
link_directories(${ROOT_LIBRARY_DIR})

file(GLOB_RECURSE RECO_SRCFILE src/*.cpp)
file(GLOB_RECURSE RECO_INCFILE include/*.hpp)

set(RECO_INCDIR ${CMAKE_CURRENT_SOURCE_DIR}/include)

add_library(${PROJECT_NAME} SHARED ${RECO_SRCFILE} ${RECO_INCFILE})

target_include_directories(${PROJECT_NAME} PUBLIC ${RECO_INCDIR})
target_link_libraries(${PROJECT_NAME} PUBLIC ${ROOT_LIBRARIES} pthread stdc++fs)
message(STATUS "Built shared library ${PROJECT_NAME}")

install(
  TARGETS ${PROJECT_NAME}
  LIBRARY DESTINATION lib
  ARCHIVE DESTINATION lib)

install(FILES ${RECO_INCFILE} DESTINATION include)

set(EXE_NAME RecoTree)

add_executable(${EXE_NAME} utils/main.cpp)

target_include_directories(${EXE_NAME} PUBLIC ${RECO_INCDIR})
target_link_libraries(${EXE_NAME} ${PROJECT_NAME})
message(STATUS "Built executable ${EXE_NAME}")

install(TARGETS ${EXE_NAME} RUNTIME DESTINATION bin)
